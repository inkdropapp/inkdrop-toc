{"version":3,"file":"toc.js","sources":["../node_modules/github-slugger/regex.js","../node_modules/github-slugger/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/color.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-toc/lib/to-expression.js","../node_modules/mdast-util-toc/lib/search.js","../node_modules/mdast-util-toc/lib/contents.js","../node_modules/mdast-util-toc/lib/index.js","../node_modules/remark-toc/index.js","../src/toc.js"],"sourcesContent":["// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * Transform a string into an applicable expression.\n *\n * @param {string} value\n * @returns {RegExp}\n */\nexport function toExpression(value) {\n  return new RegExp('^(' + value + ')$', 'i')\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Heading['depth']} Rank\n *\n */\n\n/**\n * @typedef SearchOptions\n *   Search configuration.\n * @property {Rank | null | undefined} [maxDepth=6]\n *   Maximum heading depth to include in the table of contents.\n *\n *   This is inclusive: when set to `3`, level three headings are included\n *   (those with three hashes, `###`).\n * @property {string | null | undefined} [skip]\n *   Headings to skip, wrapped in `new RegExp('^(' + value + ')$', 'i')`.\n *\n *   Any heading matching this expression will not be present in the table of\n *   contents.\n * @property {Test} [parents]\n *   Allow headings to be children of certain node types (default: the to `toc`\n *   given `tree`, to only allow top-level headings).\n *\n *   Internally, uses `unist-util-is` to check, so `parents` can be any\n *   `is`-compatible test.\n *\n * @typedef SearchEntry\n *   Entry.\n * @property {string} id\n *   ID of entry.\n * @property {Array<PhrasingContent>} children\n *   Contents of entry.\n * @property {Rank} depth\n *   Rank of entry.\n *\n * @typedef SearchResult\n *   Results.\n * @property {number} index\n *   Where the contents section starts, if looking for a heading.\n * @property {number} endIndex\n *   Where the contents section ends, if looking for a heading.\n * @property {Array<SearchEntry>} map\n *   List of entries.\n */\n\nimport Slugger from 'github-slugger'\nimport {toString} from 'mdast-util-to-string'\nimport {visit} from 'unist-util-visit'\nimport {convert} from 'unist-util-is'\nimport {toExpression} from './to-expression.js'\n\nconst slugs = new Slugger()\n\n/**\n * Search a node for a toc.\n *\n * @param {Node} root\n * @param {RegExp | undefined} expression\n * @param {SearchOptions} settings\n * @returns {SearchResult}\n */\nexport function search(root, expression, settings) {\n  const skip = settings.skip ? toExpression(settings.skip) : undefined\n  const parents = convert(settings.parents || ((d) => d === root))\n  /** @type {Array<SearchEntry>} */\n  const map = []\n  /** @type {number | undefined} */\n  let index\n  /** @type {number | undefined} */\n  let endIndex\n  /** @type {Heading | undefined} */\n  let opening\n\n  slugs.reset()\n\n  // Visit all headings in `root`.  We `slug` all headings (to account for\n  // duplicates), but only create a TOC from top-level headings (by default).\n  visit(root, 'heading', (node, position, parent) => {\n    const value = toString(node, {includeImageAlt: false})\n    /** @type {string} */\n    // @ts-expect-error `hProperties` from <https://github.com/syntax-tree/mdast-util-to-hast>\n    const id = node.data && node.data.hProperties && node.data.hProperties.id\n    const slug = slugs.slug(id || value)\n\n    if (!parents(parent)) {\n      return\n    }\n\n    // Our opening heading.\n    if (position !== null && expression && !index && expression.test(value)) {\n      index = position + 1\n      opening = node\n      return\n    }\n\n    // Our closing heading.\n    if (\n      position !== null &&\n      opening &&\n      !endIndex &&\n      node.depth <= opening.depth\n    ) {\n      endIndex = position\n    }\n\n    // A heading after the closing (if we were looking for one).\n    if (\n      (endIndex || !expression) &&\n      (!settings.maxDepth || node.depth <= settings.maxDepth) &&\n      (!skip || !skip.test(value))\n    ) {\n      map.push({depth: node.depth, children: node.children, id: slug})\n    }\n  })\n\n  return {\n    index: index === undefined ? -1 : index,\n    // <sindresorhus/eslint-plugin-unicorn#980>\n    // @ts-expect-error Looks like a parent.\n    endIndex: index === undefined ? -1 : endIndex || root.children.length, // eslint-disable-line unicorn/explicit-length-check\n    map\n  }\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('./search.js').SearchEntry} SearchEntry\n */\n\n/**\n * @typedef ContentsOptions\n *   Build configuration.\n * @property {boolean | null | undefined} [tight=false]\n *   Whether to compile list items tightly.\n * @property {boolean | null | undefined} [ordered=false]\n *   Whether to compile list items as an ordered list, otherwise they are\n *   unordered.\n * @property {string | null | undefined} [prefix=undefined]\n *   Add a prefix to links to headings in the table of contents.\n *\n *   Useful for example when later going from mdast to hast and sanitizing with\n *   `hast-util-sanitize`.\n */\n\nimport extend from 'extend'\n\n/**\n * Transform a list of heading objects to a markdown list.\n *\n * @param {Array<SearchEntry>} map\n * @param {ContentsOptions} settings\n */\nexport function contents(map, settings) {\n  const {ordered = false, tight = false, prefix = null} = settings\n  /** @type {List} */\n  const table = {type: 'list', ordered, spread: false, children: []}\n  let minDepth = Number.POSITIVE_INFINITY\n  let index = -1\n\n  // Find minimum depth.\n  while (++index < map.length) {\n    if (map[index].depth < minDepth) {\n      minDepth = map[index].depth\n    }\n  }\n\n  // Normalize depth.\n  index = -1\n\n  while (++index < map.length) {\n    map[index].depth -= minDepth - 1\n  }\n\n  // Add TOC to list.\n  index = -1\n\n  while (++index < map.length) {\n    insert(map[index], table, {ordered, tight, prefix})\n  }\n\n  return table\n}\n\n/**\n * Insert an entry into `parent`.\n *\n * @param {SearchEntry} entry\n * @param {List | ListItem} parent\n * @param {ContentsOptions} settings\n */\nfunction insert(entry, parent, settings) {\n  let index = -1\n  const tail = parent.children[parent.children.length - 1]\n\n  if (parent.type === 'list') {\n    if (entry.depth === 1) {\n      parent.children.push({\n        type: 'listItem',\n        spread: false,\n        children: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                type: 'link',\n                title: null,\n                url: '#' + (settings.prefix || '') + entry.id,\n                children: all(entry.children)\n              }\n            ]\n          }\n        ]\n      })\n    } else if (parent.children.length > 0) {\n      const tail = parent.children[parent.children.length - 1]\n      insert(entry, tail, settings)\n    } else {\n      /** @type {ListItem} */\n      const item = {type: 'listItem', spread: false, children: []}\n      parent.children.push(item)\n      insert(entry, item, settings)\n    }\n  }\n  // List item\n  else if (tail && tail.type === 'list') {\n    entry.depth--\n    insert(entry, tail, settings)\n  } else {\n    /** @type {List} */\n    const item = {\n      type: 'list',\n      ordered: settings.ordered,\n      spread: false,\n      children: []\n    }\n    parent.children.push(item)\n    entry.depth--\n    insert(entry, item, settings)\n  }\n\n  if (parent.type === 'list' && !settings.tight) {\n    parent.spread = false\n\n    while (++index < parent.children.length) {\n      if (parent.children[index].children.length > 1) {\n        parent.spread = true\n        break\n      }\n    }\n  } else {\n    parent.spread = !settings.tight\n  }\n}\n\n/**\n * @param {Array<PhrasingContent>} [nodes]\n * @returns {Array<StaticPhrasingContent>}\n */\nfunction all(nodes) {\n  /** @type {Array<StaticPhrasingContent>} */\n  let result = []\n  let index = -1\n\n  if (nodes) {\n    while (++index < nodes.length) {\n      result = result.concat(one(nodes[index]))\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {PhrasingContent} node\n * @returns {StaticPhrasingContent | Array<StaticPhrasingContent>}\n */\nfunction one(node) {\n  if (node.type === 'footnoteReference') {\n    return []\n  }\n\n  if (\n    node.type === 'link' ||\n    node.type === 'linkReference' ||\n    node.type === 'footnote'\n  ) {\n    return all(node.children)\n  }\n\n  if ('children' in node) {\n    const {children, position, ...copy} = node\n    return Object.assign(extend(true, {}, copy), {children: all(node.children)})\n  }\n\n  const {position, ...copy} = node\n  return extend(true, {}, copy)\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').List} List\n * @typedef {import('./search.js').SearchOptions} SearchOptions\n * @typedef {import('./contents.js').ContentsOptions} ContentsOptions\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {SearchOptions & ContentsOptions & ExtraOptions} Options\n *\n * @typedef ExtraOptions\n *   Extra configuration fields.\n * @property {string | null | undefined} [heading]\n *   Heading to look for, wrapped in `new RegExp('^(' + value + ')$', 'i')`.\n *\n * @typedef Result\n *   Results.\n * @property {number | null} index\n *   Index of the node right after the table of contents heading, `-1` if no\n *   heading was found, `null` if no `heading` was given.\n * @property {number | null} endIndex\n *   Index of the first node after `heading` that is not part of its section,\n *   `-1` if no heading was found, `null` if no `heading` was given, same as\n *   `index` if there are no nodes between `heading` and the first heading in\n *   the table of contents.\n * @property {List | null} map\n *   List representing the generated table of contents, `null` if no table of\n *   contents could be created, either because no heading was found or because\n *   no following headings were found.\n */\n\nimport {search} from './search.js'\nimport {contents} from './contents.js'\nimport {toExpression} from './to-expression.js'\n\n/**\n * Generate a table of contents from `tree`.\n *\n * Looks for the first heading matching `options.heading` (case insensitive) and\n * returns a table of contents (a list) for all following headings.\n * If no `heading` is specified, creates a table of contents for all headings in\n * `tree`.\n * `tree` is not changed.\n *\n * Links in the list to headings are based on GitHub’s style.\n * Only top-level headings (those not in blockquotes or lists), are used.\n * This default behavior can be changed by passing `options.parents`.\n *\n * @param {Node} tree\n *   Tree to search and generate from.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Result}\n *   Results.\n */\nexport function toc(tree, options) {\n  const settings = options || {}\n  const heading = settings.heading ? toExpression(settings.heading) : undefined\n  const result = search(tree, heading, settings)\n\n  return {\n    index: heading ? result.index : null,\n    endIndex: heading ? result.endIndex : null,\n    map: result.map.length > 0 ? contents(result.map, settings) : null\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-toc').Options} Options\n */\n\nimport {toc} from 'mdast-util-toc'\n\n/**\n * Plugin to generate a Table of Contents (TOC).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkToc(options = {}) {\n  return (node) => {\n    const result = toc(\n      node,\n      Object.assign({}, options, {\n        heading: options.heading || 'toc|table[ -]of[ -]contents?'\n      })\n    )\n\n    if (\n      result.endIndex === null ||\n      result.index === null ||\n      result.index === -1 ||\n      !result.map\n    ) {\n      return\n    }\n\n    node.children = [\n      ...node.children.slice(0, result.index),\n      result.map,\n      ...node.children.slice(result.endIndex)\n    ]\n  }\n}\n","import remarkToc from 'remark-toc'\nimport { markdownRenderer } from 'inkdrop'\n\nmodule.exports = {\n  activate() {\n    if (markdownRenderer) {\n      markdownRenderer.remarkPlugins.push(remarkToc)\n    }\n  },\n\n  deactivate() {\n    if (markdownRenderer) {\n      markdownRenderer.remarkPlugins = markdownRenderer.remarkPlugins.filter(\n        plugin => plugin !== remarkToc\n      )\n    }\n  }\n}\n"],"names":["one","all","Slugger","markdownRenderer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}